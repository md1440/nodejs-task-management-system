rm -rf node_modules/

pnpm init
mkdir config
mkdir src
mkdir src/controller
mkdir src/middleware
mkdir src/models
mkdir src/schema
mkdir src/service
mkdir src/tests
mkdir src/utils
touch .env

pnpm add express helmet compression cors morgan
pnpm add config cross-env dotenv lodash
pnpm add bcrypt jsonwebtoken 
pnpm add mongoose pino pino-pretty zod dayjs
pnpm add -D typescript ts-node-dev @types/node
pnpm add -D jest @types/jest ts-jest supertest @types/supertest
pnpm add -D @types/express @types/cors @types/compression @types/morgan
pnpm add -D @types/pino 
pnpm add -D @types/config @types/lodash
pnpm add -D @types/jsonwebtoken @types/bcrypt
pnpm add -D prettier eslint eslint-config-prettier eslint-plugin-import

echo "{
    \"compilerOptions\": {
        \"module\": \"commonjs\",
        \"noImplicitAny\": true,
        \"removeComments\": true,
        \"preserveConstEnums\": true,
        \"sourceMap\": true,
        \"strict\": true,
        \"skipLibCheck\": true,
        \"moduleResolution\": "node",
        \"target\": \"es2016\",
        \"esModuleInterop\": true,
        \"resolveJsonModule\": true,
        \"allowSyntheticDefaultImports\": true,
        \"outDir\": \"build/\"
    },
    \"include\": [\"src\"],
    \"exclude\": [\"node_modules\"]
}" >> tsconfig.json

echo "/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  testMatch: ['**/**/*.spec.ts'],
  verbose: true,
  forceExit: true,
  clearMocks: true,
  resetMocks: true,
  restoreMocks: true,
}" >> jest.config.js

echo "module.exports = {
  env: {
    es2021: true,
    node: true,
  },
  extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended', 'prettier'],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 13,
    sourceType: 'module',
  },
  plugins: ['@typescript-eslint'],
  rules: {},
}" >> .eslintrc.js

echo "*.key*
*.pem
config.env
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
*.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out


# Serverless directories
.serverless/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
" >> .gitignore
